version: '3.8'

services:
  # Node.js Express API Service
  api:
    image: luji97/lapangku-backend:1.0.0 
    container_name: lapangku-api
    ports:
      - "3000:3000" 
    env_file:
      - .env
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/lapangku
      - REDIS_HOST=redis
      - REDIS_USER=
      - REDIS_PASSWORD=
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  # Seeder Service (runs once to initialize data)
  seeder:
    image: luji97/lapangku-backend:1.0.0
    container_name: lapangku-seeder
    env_file:
      - .env
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/lapangku
      - REDIS_HOST=redis
      - REDIS_USER=
      - REDIS_PASSWORD=
    command: npm run seed
    depends_on:
      api:
        condition: service_started
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    restart: "no"  
    networks:
      - app-network

  # MongoDB Service
  mongodb:
    image: mongo:6.0.26
    container_name: lapangku-mongodb
    ports:
      - "27017:27017" 
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network

  # Redis Service
  redis:
    image: redis/redis-stack-server:7.2.0-v18
    container_name: lapangku-redis
    ports:
      - "6379:6379" 
    restart: unless-stopped
    networks:
      - app-network

# Custom network for service communication
networks:
  app-network:
    driver: bridge